var app=angular.module("glint",["glint.services","glint.ideas","glint.votes","glint.auth","glint.comments","ngAnimate","ngRoute"]).config(function(a){a.when("/",{templateUrl:"app/ideas/ideas.html"}).when("/login",{templateUrl:"app/auth/login.html"}).when("/signup",{templateUrl:"app/auth/signup.html"}).otherwise({redirectTo:"/"})}).filter("moment",function(){return function(a){return moment(a).fromNow()}}),glintServices=angular.module("glint.services",[]);glintServices.factory("Ideas",function(a){var b=function(){return a({method:"GET",url:"/api/ideas"}).then(function(a){return a.data})["catch"](function(a){console.error("getIdeas error",a)})},c=function(b){return a({method:"POST",url:"/api/ideas",data:b}).then(function(a){return a.data})["catch"](function(a){console.error("createIdeas error",a)})};return{getIdeas:b,createIdea:c}}),glintServices.factory("Votes",function(a){var b=function(b){return a({method:"POST",url:"/api/vote/upvote",data:b}).then(function(a){return a.data})["catch"](function(a){console.error("upvote error",a)})},c=function(b){return a({method:"POST",url:"/api/vote/downvote",data:b}).then(function(a){return a.data})["catch"](function(a){console.error("downvote error",a)})};return{upvote:b,downvote:c}}),glintServices.factory("Auth",function(a,b,c){var d=function(b){return a({method:"POST",url:"/api/users/signin",data:b}).then(function(a){return a.data})["catch"](function(a){console.error("login error",a)})},e=function(b){return a({method:"POST",url:"/api/users/signup",data:b}).then(function(a){return a.data})["catch"](function(a){console.error("signup error",a)})},f=function(){var a=JSON.parse(b.localStorage.getItem("com.glinted"));return a?a.data:null},g=function(){b.localStorage.removeItem("com.glinted"),c.path("/")};return{getUser:f,login:d,signup:e,logout:g}}),glintServices.factory("Comments",function(a){var b=function(b){return a({method:"POST",url:"/api/comments",data:b}).then(function(a){return a.data})["catch"](function(a){console.error("createComments error",a)})},c=function(b){return a({method:"GET",url:"/api/comments",data:b}).then(function(a){return a.data})["catch"](function(a){console.error("getComments error",a)})};return{createComment:b,getComments:c}}),angular.module("glint.ideas",[]).controller("IdeasCtrl",function(a,b,c){var d=this;d.data={ideas:[]},d.idea={},d.postSuccess=!1,d.submitted=!1,d.logout=c.logout,d.user=c.getUser(),d.displayIdeas=function(){a.getIdeas().then(function(a){a=b("orderBy")(a,"votes",!0),d.data.ideas=a})["catch"](function(a){console.error("displayIdeas error",a)})},d.submitIdea=function(){if(d.submitted===!1)d.submitted=!0;else{d.idea.title=_.escape(d.idea.title),d.idea.text=_.escape(d.idea.text);var b=JSON.stringify(d.idea);a.createIdea(b).then(function(){d.postSuccess=!0,d.submitted=!1,d.idea={},d.displayIdeas()})["catch"](function(a){console.error("createIdea error",a)})}},d.displayIdeas()}),angular.module("glint.votes",[]).controller("VotesCtrl",function(a){var b=this;b.upvote=function(b,c){var d=b;b={idea:b,gCount:c},b=JSON.stringify(b),a.upvote(b).then(function(){d.votes+=c})["catch"](function(a){console.error("upvote error",a)})},b.downvote=function(b){var c=b;b=JSON.stringify(b),a.downvote(b).then(function(){c.votes--})["catch"](function(a){console.error("downvote error",a)})}}),angular.module("glint.auth",[]).controller("AuthCtrl",function(a,b,c){var d=this;d.user={},d.login=function(){d.user.username=_.escape(d.user.username),d.user.password=_.escape(d.user.password);var e=JSON.stringify(d.user);a.login(e).then(function(a){b.localStorage.setItem("com.glinted",JSON.stringify(a)),c.path("/")})["catch"](function(a){console.error("login error",a)})},d.signup=function(){d.user.username=_.escape(d.user.username),d.user.password=_.escape(d.user.password);var e=JSON.stringify(d.user);a.signup(e).then(function(a){b.localStorage.setItem("com.glinted",JSON.stringify(a)),c.path("/")})["catch"](function(a){console.error("signup error",a)})}}),angular.module("glint.comments",[]).controller("CommentsCtrl",function(a){var b=this;b.comment={},b.submitComment=function(){comment=JSON.stringify(b.comment),a.createComment(comment).then(function(){})["catch"](function(a){console.error("comment error",a)})},b.displayComments=function(b){a.getComments(b).then(function(){})["catch"](function(a){console.error("displayComments error",a)})}});